// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

/**
 * 
 * Defines the standard 2-letter ISO 3166 country code set, plus
 * some additional country codes that eBay uses.
 * (The additional codes appear at the end of this code list and
 * are noted as non-ISO.)
 * For English names that correspond to each code (e.g., KY="Cayman Islands"),
 * see the ISO site:
 * http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
 * 
 */
public enum CountryCodeType {

    AF("AF"),
  

    AL("AL"),
  

    DZ("DZ"),
  

    AS("AS"),
  

    AD("AD"),
  

    AO("AO"),
  

    AI("AI"),
  

    AQ("AQ"),
  

    AG("AG"),
  

    AR("AR"),
  

    AM("AM"),
  

    AW("AW"),
  

    AU("AU"),
  

    AT("AT"),
  

    AZ("AZ"),
  

    BS("BS"),
  

    BH("BH"),
  

    BD("BD"),
  

    BB("BB"),
  

    BY("BY"),
  

    BE("BE"),
  

    BZ("BZ"),
  

    BJ("BJ"),
  

    BM("BM"),
  

    BT("BT"),
  

    BO("BO"),
  

    BA("BA"),
  

    BW("BW"),
  

    BV("BV"),
  

    BR("BR"),
  

    IO("IO"),
  

    BN("BN"),
  

    BG("BG"),
  

    BF("BF"),
  

    BI("BI"),
  

    KH("KH"),
  

    CM("CM"),
  

    CA("CA"),
  

    CV("CV"),
  

    KY("KY"),
  

    CF("CF"),
  

    TD("TD"),
  

    CL("CL"),
  

    CN("CN"),
  

    CX("CX"),
  

    CC("CC"),
  

    CO("CO"),
  

    KM("KM"),
  

    CG("CG"),
  

    CD("CD"),
  

    CK("CK"),
  

    CR("CR"),
  

    CI("CI"),
  

    HR("HR"),
  

    CU("CU"),
  

    CY("CY"),
  

    CZ("CZ"),
  

    DK("DK"),
  

    DJ("DJ"),
  

    DM("DM"),
  

    DO("DO"),
  

    TP("TP"),
  

    EC("EC"),
  

    EG("EG"),
  

    SV("SV"),
  

    GQ("GQ"),
  

    ER("ER"),
  

    EE("EE"),
  

    ET("ET"),
  

    FK("FK"),
  

    FO("FO"),
  

    FJ("FJ"),
  

    FI("FI"),
  

    FR("FR"),
  

    GF("GF"),
  

    /**
     * 
   * French Polynesia. Includes Tahiti.
   * 
     */
    PF("PF"),
  

    TF("TF"),
  

    GA("GA"),
  

    GM("GM"),
  

    GE("GE"),
  

    DE("DE"),
  

    GH("GH"),
  

    GI("GI"),
  

    GR("GR"),
  

    GL("GL"),
  

    GD("GD"),
  

    GP("GP"),
  

    GU("GU"),
  

    GT("GT"),
  

    GN("GN"),
  

    GW("GW"),
  

    GY("GY"),
  

    HT("HT"),
  

    HM("HM"),
  

    VA("VA"),
  

    HN("HN"),
  

    HK("HK"),
  

    HU("HU"),
  

    IS("IS"),
  

    IN("IN"),
  

    ID("ID"),
  

    IR("IR"),
  

    IQ("IQ"),
  

    IE("IE"),
  

    IL("IL"),
  

    IT("IT"),
  

    JM("JM"),
  

    JP("JP"),
  

    JO("JO"),
  

    KZ("KZ"),
  

    KE("KE"),
  

    KI("KI"),
  

    KP("KP"),
  

    KR("KR"),
  

    KW("KW"),
  

    KG("KG"),
  

    LA("LA"),
  

    LV("LV"),
  

    LB("LB"),
  

    LS("LS"),
  

    LR("LR"),
  

    LY("LY"),
  

    LI("LI"),
  

    LT("LT"),
  

    LU("LU"),
  

    MO("MO"),
  

    MK("MK"),
  

    MG("MG"),
  

    MW("MW"),
  

    MY("MY"),
  

    MV("MV"),
  

    ML("ML"),
  

    MT("MT"),
  

    MH("MH"),
  

    MQ("MQ"),
  

    MR("MR"),
  

    MU("MU"),
  

    YT("YT"),
  

    MX("MX"),
  

    FM("FM"),
  

    MD("MD"),
  

    MC("MC"),
  

    MN("MN"),
  

    MS("MS"),
  

    MA("MA"),
  

    MZ("MZ"),
  

    MM("MM"),
  

    NA("NA"),
  

    NR("NR"),
  

    NP("NP"),
  

    NL("NL"),
  

    AN("AN"),
  

    NC("NC"),
  

    NZ("NZ"),
  

    NI("NI"),
  

    NE("NE"),
  

    NG("NG"),
  

    NU("NU"),
  

    NF("NF"),
  

    MP("MP"),
  

    NO("NO"),
  

    OM("OM"),
  

    PK("PK"),
  

    PW("PW"),
  

    PS("PS"),
  

    PA("PA"),
  

    PG("PG"),
  

    PY("PY"),
  

    PE("PE"),
  

    PH("PH"),
  

    PN("PN"),
  

    PL("PL"),
  

    PT("PT"),
  

    PR("PR"),
  

    QA("QA"),
  

    RE("RE"),
  

    RO("RO"),
  

    RU("RU"),
  

    RW("RW"),
  

    SH("SH"),
  

    KN("KN"),
  

    LC("LC"),
  

    PM("PM"),
  

    VC("VC"),
  

    WS("WS"),
  

    SM("SM"),
  

    ST("ST"),
  

    SA("SA"),
  

    SN("SN"),
  

    SC("SC"),
  

    SL("SL"),
  

    SG("SG"),
  

    SK("SK"),
  

    SI("SI"),
  

    SB("SB"),
  

    SO("SO"),
  

    ZA("ZA"),
  

    GS("GS"),
  

    ES("ES"),
  

    LK("LK"),
  

    SD("SD"),
  

    SR("SR"),
  

    SJ("SJ"),
  

    SZ("SZ"),
  

    SE("SE"),
  

    CH("CH"),
  

    SY("SY"),
  

    TW("TW"),
  

    TJ("TJ"),
  

    TZ("TZ"),
  

    TH("TH"),
  

    TG("TG"),
  

    TK("TK"),
  

    TO("TO"),
  

    TT("TT"),
  

    TN("TN"),
  

    TR("TR"),
  

    TM("TM"),
  

    TC("TC"),
  

    TV("TV"),
  

    UG("UG"),
  

    UA("UA"),
  

    AE("AE"),
  

    GB("GB"),
  

    US("US"),
  

    UM("UM"),
  

    UY("UY"),
  

    UZ("UZ"),
  

    VU("VU"),
  

    VE("VE"),
  

    VN("VN"),
  

    VG("VG"),
  

    VI("VI"),
  

    WF("WF"),
  

    EH("EH"),
  

    YE("YE"),
  

    YU("YU"),
  

    ZM("ZM"),
  

    ZW("ZW"),
  

    /**
     * 
   * NOTE: APO/FPO was defined in eBay list previously
   * but they are not defined in ISO 3166. This country
   * will remain on eBay country code list for backward
   * compatibility.
   *  
     */
    AA("AA"),
  

    /**
     * 
   * NOTE: Guernsey was defined in eBay list previously
   * but they are not defined in ISO 3166. This country
   * will remain on eBay country list for backward
   * compatibility.
   *  
     */
    QM("QM"),
  

    /**
     * 
   *  NOTE: Jan Mayen was defined in eBay list previously
   *  but they are not defined in ISO 3166. This country
   *  will remain on eBay country list for backward
   *  compatibility.
   *  
     */
    QN("QN"),
  

    /**
     * 
   *  NOTE: Jersey was defined in eBay list previously
   *  but they are not defined in ISO 3166. This country
   *  will remain on eBay country list for backward
   *  compatibility.
   *  
     */
    QO("QO"),
  

    QP("QP"),
  

    /**
     * 
   * Placeholder value. See
   * <a href="types/simpleTypes.html#token">token</a>.
   * 
     */
    CUSTOM_CODE("CustomCode");
  
  
    private final String value;
  
    CountryCodeType(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static CountryCodeType fromValue(String v) {
        if (v != null) {
            for (CountryCodeType c: CountryCodeType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
        }
        throw new IllegalArgumentException(v);
    }
}