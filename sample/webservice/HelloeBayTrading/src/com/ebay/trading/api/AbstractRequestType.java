// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.trading.api;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Base type definition of the request payload, which can carry any type of payload
 * content plus optional versioning information and detail level requirements. All
 * concrete request types (e.g., AddItemRequestType) are derived from the abstract
 * request type. The naming convention we use for the concrete type names is the name
 * of the service (the verb or call name) followed by "RequestType":
 * VerbNameRequestType
 * 
 */
public abstract class AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "DetailLevel")
	@Order(value=0)
	public List<DetailLevelCodeType> detailLevel;	
	
	@Element(name = "ErrorLanguage")
	@Order(value=1)
	public String errorLanguage;	
	
	@Element(name = "MessageID")
	@Order(value=2)
	public String messageID;	
	
	@Element(name = "Version")
	@Order(value=3)
	public String version;	
	
	@Element(name = "EndUserIP")
	@Order(value=4)
	public String endUserIP;	
	
	@Element(name = "ErrorHandling")
	@Order(value=5)
	public ErrorHandlingCodeType errorHandling;	
	
	@Element(name = "InvocationID")
	@Order(value=6)
	public String invocationID;	
	
	@Element(name = "OutputSelector")
	@Order(value=7)
	public List<String> outputSelector;	
	
	@Element(name = "WarningLevel")
	@Order(value=8)
	public WarningLevelCodeType warningLevel;	
	
	@Element(name = "BotBlock")
	@Order(value=9)
	public BotBlockRequestType botBlock;	
	
	@AnyElement
	@Order(value=10)
	public List<Object> any;	
	
    
}