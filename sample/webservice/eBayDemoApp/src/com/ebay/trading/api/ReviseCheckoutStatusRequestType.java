// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.trading.api;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;

/**
 * 
 * A seller can use this call to update the payment details, the shipping details,
 * and the status of an order.
 * 
 */
@RootElement(name = "ReviseCheckoutStatusRequest", namespace = "urn:ebay:apis:eBLBaseComponents")
public class ReviseCheckoutStatusRequestType extends AbstractRequestType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "ItemID")
	@Order(value=0)
	public String itemID;	
	
	@Element(name = "TransactionID")
	@Order(value=1)
	public String transactionID;	
	
	@Element(name = "OrderID")
	@Order(value=2)
	public String orderID;	
	
	@Element(name = "AmountPaid")
	@Order(value=3)
	public AmountType amountPaid;	
	
	@Element(name = "PaymentMethodUsed")
	@Order(value=4)
	public BuyerPaymentMethodCodeType paymentMethodUsed;	
	
	@Element(name = "CheckoutStatus")
	@Order(value=5)
	public CompleteStatusCodeType checkoutStatus;	
	
	@Element(name = "ShippingService")
	@Order(value=6)
	public String shippingService;	
	
	@Element(name = "ShippingIncludedInTax")
	@Order(value=7)
	public Boolean shippingIncludedInTax;	
	
	@Element(name = "CheckoutMethod")
	@Order(value=8)
	public CheckoutMethodCodeType checkoutMethod;	
	
	@Element(name = "InsuranceType")
	@Order(value=9)
	public InsuranceSelectedCodeType insuranceType;	
	
	@Element(name = "PaymentStatus")
	@Order(value=10)
	public RCSPaymentStatusCodeType paymentStatus;	
	
	@Element(name = "AdjustmentAmount")
	@Order(value=11)
	public AmountType adjustmentAmount;	
	
	@Element(name = "ShippingAddress")
	@Order(value=12)
	public AddressType shippingAddress;	
	
	@Element(name = "BuyerID")
	@Order(value=13)
	public String buyerID;	
	
	@Element(name = "ShippingInsuranceCost")
	@Order(value=14)
	public AmountType shippingInsuranceCost;	
	
	@Element(name = "SalesTax")
	@Order(value=15)
	public AmountType salesTax;	
	
	@Element(name = "ShippingCost")
	@Order(value=16)
	public AmountType shippingCost;	
	
	@Element(name = "EncryptedID")
	@Order(value=17)
	public String encryptedID;	
	
	@Element(name = "ExternalTransaction")
	@Order(value=18)
	public ExternalTransactionType externalTransaction;	
	
	@Element(name = "MultipleSellerPaymentID")
	@Order(value=19)
	public String multipleSellerPaymentID;	
	
	@Element(name = "CODCost")
	@Order(value=20)
	public AmountType codCost;	
	
	@Element(name = "OrderLineItemID")
	@Order(value=21)
	public String orderLineItemID;	
	
    
}