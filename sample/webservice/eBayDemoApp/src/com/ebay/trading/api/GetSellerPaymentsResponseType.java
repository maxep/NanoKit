// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.trading.api;

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
import java.util.List;

/**
 * 
 * Returns a summary of pending or paid payments that Half.com created for the seller
 * identified by the authentication token in the request. Only returns payments that
 * occurred within a particular pay period. Each payment is for one transaction for
 * one item in one order. An order can contain transactions for multiple items from
 * multiple sellers, but this call only retrieves payments that are relevant to one
 * seller. Payments are only issued for items and transactions that the seller has
 * confirmed (see the Half.com online help for details). The financial value of a
 * payment is typically based on an amount that a buyer paid to Half.com for a
 * transaction, plus the shipping cost the buyer paid to Half.com for the item, minus
 * Half.com's commission. For most sellers, each month contains two pay periods: One
 * from the 1st to the 15th of the month, and one from the 16th to the last day of
 * the month. Payments are submitted to the seller's financial institution a certain
 * number of days after the current pay period ends (see the Half.com online help for
 * details).
 * 
 */
@RootElement(name = "GetSellerPaymentsResponse", namespace = "urn:ebay:apis:eBLBaseComponents")
public class GetSellerPaymentsResponseType extends AbstractResponseType implements Serializable {

    private static final long serialVersionUID = -1L;

	@Element(name = "PaginationResult")
	@Order(value=0)
	public PaginationResultType paginationResult;	
	
	@Element(name = "HasMorePayments")
	@Order(value=1)
	public Boolean hasMorePayments;	
	
	@Element(name = "SellerPayment")
	@Order(value=2)
	public List<SellerPaymentType> sellerPayment;	
	
	@Element(name = "PaymentsPerPage")
	@Order(value=3)
	public Integer paymentsPerPage;	
	
	@Element(name = "PageNumber")
	@Order(value=4)
	public Integer pageNumber;	
	
	@Element(name = "ReturnedPaymentCountActual")
	@Order(value=5)
	public Integer returnedPaymentCountActual;	
	
    
}