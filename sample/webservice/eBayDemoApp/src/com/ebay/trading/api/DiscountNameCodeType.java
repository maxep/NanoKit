// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.trading.api;

/**
 * 
 * The type of shipping discount profile.
 * 
 */
public enum DiscountNameCodeType {

    /**
     * 
   * The cost to ship each item beyond the first item (where the item with the
   * highest shipping cost is selected by eBay as the first item).
   * Let's say the buyer purchases three items, each set to ship for $8, and
   * the seller set EachAdditionalAmount to $6.  The cost to ship three items would
   * normally be $24, but since the seller specified $6, the total shipping
   * cost would be $8 + $6 + $6, or $20.
   * For flat shipping discount profile only.
   * 
     */
    EACH_ADDITIONAL_AMOUNT("EachAdditionalAmount"),
  

    /**
     * 
   * The amount by which to reduce the cost to ship each item beyond the
   * first item (where the item with the highest shipping cost is selected by eBay
   * as the first item).
   * Let's say the buyer purchases three items, each set to ship for $8, and
   * the seller set EachAdditionalAmountOff to $2.  The cost to ship three items would
   * normally be $24, but since the seller specified $2, the total shipping
   * cost would be $24 - (two additional items x $2), or $20.
   * For flat shipping discount profile only.
   * 
     */
    EACH_ADDITIONAL_AMOUNT_OFF("EachAdditionalAmountOff"),
  

    /**
     * 
   * The percentage by which to reduce the cost to ship each item beyond
   * the first item (where the item with the highest shipping cost is selected by
   * eBay as the first item).
   * Let's say the buyer purchases three items, each set to ship for $8, and
   * the seller set EachAdditionalPercentOff to 0.25.  The cost to ship three items would
   * normally be $24, but since the seller specified 0.25 ($2 out of 8), the total shipping
   * cost would be $24 - (two additional items x $2), or $20.
   * For flat rate shipping discount profile only.
   * 
     */
    EACH_ADDITIONAL_PERCENT_OFF("EachAdditionalPercentOff"),
  

    /**
     * 
   * Shipping cost is the total of what it would cost to ship each item individually.
   * This is simply a way to define how shipping is to be calculated--there is no
   * discount for the buyer with this selection.
   * For calculated shipping discount profile only.
   * 
     */
    INDIVIDUAL_ITEM_WEIGHT("IndividualItemWeight"),
  

    /**
     * 
   * Shipping cost is based on the total weight of all individual items.
   * This is simply a way to define how shipping is to be calculated--there is no
   * discount for the buyer with this selection.
   * For calculated shipping discount profile only.
   * 
     */
    COMBINED_ITEM_WEIGHT("CombinedItemWeight"),
  

    /**
     * 
   * The amount of weight to subtract for each item beyond the first item
   * before shipping costs are calculated. For example, there may be less packing
   * material when the items are combined in one box than if they were shipped
   * individually. Let's say the buyer purchases three items, each 10 oz. in weight, and
   * the seller set WeightOff to 2 oz.  The combined weight would be 30 oz., but since
   * the seller specified 2 oz. off, the total weight for shipping cost calculation
   * would be 30 oz. - (two additional items x 2 oz.), or 26 oz.
   * For calculated shipping discount profile only.
   * 
     */
    WEIGHT_OFF("WeightOff"),
  

    /**
     * 
   * Shipping cost X applies if the total cost of items purchased is Y.
   * For promotional discount only.
   * 
     */
    SHIPPING_COST_X_FOR_AMOUNT_Y("ShippingCostXForAmountY"),
  

    /**
     * 
   * Shipping cost X applies if the total number of items purchased is N.
   * For promotional discount only.
   * 
     */
    SHIPPING_COST_X_FOR_ITEM_COUNT_N("ShippingCostXForItemCountN"),
  

    /**
     * 
   * The shipping cost will not exceed this.
   * For promotional discount only.
   * 
     */
    MAXIMUM_SHIPPING_COST_PER_ORDER("MaximumShippingCostPerOrder"),
  

    /**
     * 
   * Reserved for internal or future use.
   * 
     */
    CUSTOM_CODE("CustomCode");
  
  
    private final String value;
  
    DiscountNameCodeType(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static DiscountNameCodeType fromValue(String v) {
        if (v != null) {
            for (DiscountNameCodeType c: DiscountNameCodeType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
        }
        throw new IllegalArgumentException(v);
    }
}