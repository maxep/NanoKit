// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.trading.api;

/**
 * 
 * Specifies standard subsets of data to return for each result
 * within the set of results in the response payload. If no
 * detail level is specified, a base set of data is returned.
 * The base set of data varies per call.
 * 
 */
public enum DetailLevelCodeType {

    /**
     * 
   * (in) Returns all available data.
   * With GetSellerList and other calls that retrieve large data sets,
   * please avoid using ReturnAll when possible. For example, if you use
   * GetSellerList, use a GranularityLevel or use the
   * GetSellerEvents call instead. If you use ReturnAll with GetSellerList,
   * use a small EntriesPerPage value and a short
   * EndTimeFrom/EndTimeTo range for better performance.
   * 
     */
    RETURN_ALL("ReturnAll"),
  

    /**
     * 
   * (in) Returns Description, plus the
   * ListingDesigner node and some additional information if applicable
   * 
     */
    ITEM_RETURN_DESCRIPTION("ItemReturnDescription"),
  

    /**
     * 
   * (in) For GetItem, returns Item Specifics and
   * Pre-filled Item Information, if any.
   * For GetSearchResults, only returns Item Specifics (if any) that
   * are applicable to search results, and only under certain conditions.
   * See the description of Item.AttributeSetArray for details about
   * the effects for applicable calls. Also see the description of
   * Item.ProductListingDetails for GetItem.
   * 
     */
    ITEM_RETURN_ATTRIBUTES("ItemReturnAttributes"),
  

    /**
     * 
   * (in) For the GetSearchResults call, returns the primary category and, if applicable, the secondary category
   * 
     */
    ITEM_RETURN_CATEGORIES("ItemReturnCategories"),
  

    /**
     * 
   * (in) Returns the summary data.
   * For GetMyMessages, this detail level returns the same data
   * whether or not you include MessageIDs or AlertIDs in the
   * request. Returns up to 10 FolderID and FolderName values.
   * Currently, this detail level is the only way to retrieve
   * FolderID and FolderName values. See "GetMyMessages" in the
   * eBay Web Services Guide for a code sample that demonstrates
   * this.
   * 
     */
    RETURN_SUMMARY("ReturnSummary"),
  

    /**
     * 
   * (in) Returns message headers.
   * For GetMyMessages, if you include MessageIDs or AlertIDs in
   * the request, this detail level returns header information,
   * without body text, for the specified message ID or alert ID
   * values. If you include a FolderID, header information is
   * returned only for the messages and alerts in the specified
   * folder.
   * If you do not include MessageIDs or AlertIDs, this detail
   * level returns header information for Alerts and Messages as follows:
   * - If all the Alerts have been read, they are sorted in date order,
   * with the most recent first.
   * - If one of the Alerts has not been read, the Read Alerts come first,
   * sorted most recent first, followed by the Unread Alert(s).
   * - All messages in ascending order by date received with the
   *   oldest messages first.
   * Note that even when restricted by this detail level to
   * return only header information, GetMyMessages may return a
   * high volume of data.
   * 
     */
    RETURN_HEADERS("ReturnHeaders"),
  

    /**
     * 
   * (in) Returns full message information.
   * For GetMyMessages, if you include MessageIDs or AlertIDs in
   * the request, this detail level returns message information
   * for the specified message ID or alert ID values. If you
   * include a FolderID, message information is returned only for
   * the messages and alerts in the specified folder.
   * 
     */
    RETURN_MESSAGES("ReturnMessages");
  
  
    private final String value;
  
    DetailLevelCodeType(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static DetailLevelCodeType fromValue(String v) {
        if (v != null) {
            for (DetailLevelCodeType c: DetailLevelCodeType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
        }
        throw new IllegalArgumentException(v);
    }
}