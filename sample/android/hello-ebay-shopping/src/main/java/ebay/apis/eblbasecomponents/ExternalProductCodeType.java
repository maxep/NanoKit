// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ebay.apis.eblbasecomponents;

/**
 * 
 * Indicates the type of external product ID being used to identify a
 * stock product.
 * 
 */
public enum ExternalProductCodeType {

    /**
     * 
   * ExternalProductID.Value contains an ISBN value.
   * Required when you pass an ISBN as the external product ID.
   * (This value is also applicable to Half.com listings.)
   * 
     */
    ISBN("ISBN"),
  

    /**
     * 
   * ExternalProductID.Value contains a UPC value.
   * Required when you pass a UPC as the external product ID.
   * (This value is also applicable to Half.com listings.)
   * 
     */
    UPC("UPC"),
  

    /**
     * 
   * ExternalProductID.Value contains an eBay catalog product ID.
   * Required when you pass an eBay product ID
   * as the external product ID.
   * Not applicable with FindItemsAdvanced or FindProducts.
   * 
     */
    PRODUCT_ID("ProductID"),
  

    /**
     * 
   * ExternalProductID.Value contains an EAN value.
   * Required when you pass an EAN as the external product ID.
   * 
     */
    EAN("EAN"),
  

    /**
     * 
   * ExternalProductID.Value contains a set of keywords that uniquely identify the product.
   * Only applicable when listing event ticket.
   * See the eBay Web Services guide for information about valid
   * ticket keywords for an external product ID.
   * Required when you pass a set of keywords as the external product ID.
   * Not applicable with FindItemsAdvanced or FindProducts. 
   * With FindItemsAdvanced, use TicketFinder instead.
   * 
     */
    KEYWORDS("Keywords"),
  

    /**
     * 
   * Reserved for future use.
   * 
     */
    MPN("MPN"),
  

    /**
     * 
   * Reserved for internal or future use
   * 
     */
    CUSTOM_CODE("CustomCode");
  
  
    private final String value;
  
    ExternalProductCodeType(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static ExternalProductCodeType fromValue(String v) {
        if (v != null) {
            for (ExternalProductCodeType c: ExternalProductCodeType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
        }
        throw new IllegalArgumentException(v);
    }
}