// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package com.ebay.trading.api;

/**
 * 
 * This enumerated type defines the sort values that can be used in the
 * <b>FavoriteSearch.ItemSort</b> filter in a <b>GetMyeBayBuying</b>
 * request.
 * 
 */
public enum SimpleItemSortCodeType {

    /**
     * 
   * Sorts items by Best Match, and no sort order applies. If specified,
   * then Best Match sort also applies to CategoryHistogram.
   * 
     */
    BEST_MATCH("BestMatch"),
  

    /**
     * 
   * This value is reserved for future or internal use.
   * 
     */
    CUSTOM_CODE("CustomCode"),
  

    /**
     * 
   * Sorts by the end time of the listing, in ascending or descending order according to the
   * <b>SortOrder</b> value.
   * 
     */
    END_TIME("EndTime"),
  

    /**
     * 
   * Sorts by number of bids on the item, in ascending or descending order according to the
   * <b>SortOrder</b> value.
   * 
     */
    BID_COUNT("BidCount"),
  

    /**
     * 
   * Sorts by country; no sort order can be specified.
   * 
     */
    COUNTRY("Country"),
  

    /**
     * 
   * Sorts by current bid; descending order only.
   * 
     */
    CURRENT_BID("CurrentBid"),
  

    /**
     * 
   * Sorts by distance; ascending order only.
   * 
     */
    DISTANCE("Distance"),
  

    /**
     * 
   * Sorts by the start time of the listing; recently-listed first.
   * 
     */
    START_DATE("StartDate"),
  

    /**
     * 
   * Sorts by BestMatchCategoryGroup, so results are grouped by Best Match within a category.
   * 
     */
    BEST_MATCH_CATEGORY_GROUP("BestMatchCategoryGroup"),
  

    /**
     * 
   * Sorts by total cost, which is item cost plus shipping cost. If
   * <b>SortOrder</b> is included and set to 'Ascending', items are sorted
   * in the following order: Lowest total cost (for items where shipping was
   * properly specified); then freight-shipping items (lowest to highest); and finally,
   * items for which shipping was not specified (lowest to highest).
   * 
     */
    PRICE_PLUS_SHIPPING("PricePlusShipping");
  
  
    private final String value;
  
    SimpleItemSortCodeType(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static SimpleItemSortCodeType fromValue(String v) {
        if (v != null) {
            for (SimpleItemSortCodeType c: SimpleItemSortCodeType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
        }
        throw new IllegalArgumentException(v);
    }
}